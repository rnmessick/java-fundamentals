/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basicLibrary;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import static basicLibrary.Library.*;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test
    public void testRoll_buildArray(){
        assertTrue("Six sided die is rolled, array values must be added", Library.roll(13).length == 13);
    }

    @Test
    public void testContainsDuplicates_contains() {
        assertTrue("Array should have no duplicates, should return true", Library.containsDuplicates(new int[] {1,2,2,3}));
    }
    @Test
    public void testContainsDuplicates_doesNotContain() {
        assertFalse("Array should have no duplicates, should return false", Library.containsDuplicates(new int[] {1,2,3,4}));
    }

    @Test
    public void testGetLowestAverage() {
        assertArrayEquals("Should find lowest average for nested arrays", new int[]{1,2,3,4}, Library.getLowestAverage(new int[][]{{1,2,3,4}, {5,6,7,8}}));
    }

    @Test
    public void testAnalyzeWeatherData() {
        // Daily average temperatures for Seattle, October 1-28 2017
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        assertTrue(" Highest and lowest temps should print out", Library.analyzeWeatherData(weeklyMonthTemperatures).contains("72") && Library.analyzeWeatherData(weeklyMonthTemperatures).contains("51"));
    }

    @Test
    public void testTallyVotes_findWinner(){
        List<String> votes = new ArrayList();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        assertTrue("The winner should be printed", Library.TallyVotes(votes).contains("Bush"));
    }
}
